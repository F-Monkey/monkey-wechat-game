// source: Game.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();
const proto = {};
goog.exportSymbol('proto.cn.monkey.proto.AgreeSwitchRole', null, global);
goog.exportSymbol('proto.cn.monkey.proto.ApplySwitchRole', null, global);
goog.exportSymbol('proto.cn.monkey.proto.ChooseRoomServer', null, global);
goog.exportSymbol('proto.cn.monkey.proto.ChooseRoomServerResult', null, global);
goog.exportSymbol('proto.cn.monkey.proto.Create', null, global);
goog.exportSymbol('proto.cn.monkey.proto.DMInfo', null, global);
goog.exportSymbol('proto.cn.monkey.proto.EnterScene', null, global);
goog.exportSymbol('proto.cn.monkey.proto.GameData', null, global);
goog.exportSymbol('proto.cn.monkey.proto.GameEnter', null, global);
goog.exportSymbol('proto.cn.monkey.proto.Item', null, global);
goog.exportSymbol('proto.cn.monkey.proto.Player', null, global);
goog.exportSymbol('proto.cn.monkey.proto.Role', null, global);
goog.exportSymbol('proto.cn.monkey.proto.Scene', null, global);
goog.exportSymbol('proto.cn.monkey.proto.SearchItemResult', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cn.monkey.proto.ChooseRoomServer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cn.monkey.proto.ChooseRoomServer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cn.monkey.proto.ChooseRoomServer.displayName = 'proto.cn.monkey.proto.ChooseRoomServer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cn.monkey.proto.ChooseRoomServerResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cn.monkey.proto.ChooseRoomServerResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cn.monkey.proto.ChooseRoomServerResult.displayName = 'proto.cn.monkey.proto.ChooseRoomServerResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cn.monkey.proto.Create = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cn.monkey.proto.Create, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cn.monkey.proto.Create.displayName = 'proto.cn.monkey.proto.Create';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cn.monkey.proto.GameEnter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cn.monkey.proto.GameEnter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cn.monkey.proto.GameEnter.displayName = 'proto.cn.monkey.proto.GameEnter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cn.monkey.proto.EnterScene = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cn.monkey.proto.EnterScene, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cn.monkey.proto.EnterScene.displayName = 'proto.cn.monkey.proto.EnterScene';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cn.monkey.proto.Player = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cn.monkey.proto.Player, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cn.monkey.proto.Player.displayName = 'proto.cn.monkey.proto.Player';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cn.monkey.proto.Role = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cn.monkey.proto.Role, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cn.monkey.proto.Role.displayName = 'proto.cn.monkey.proto.Role';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cn.monkey.proto.DMInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cn.monkey.proto.DMInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cn.monkey.proto.DMInfo.displayName = 'proto.cn.monkey.proto.DMInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cn.monkey.proto.Item = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cn.monkey.proto.Item, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cn.monkey.proto.Item.displayName = 'proto.cn.monkey.proto.Item';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cn.monkey.proto.Scene = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cn.monkey.proto.Scene.repeatedFields_, null);
};
goog.inherits(proto.cn.monkey.proto.Scene, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cn.monkey.proto.Scene.displayName = 'proto.cn.monkey.proto.Scene';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cn.monkey.proto.ApplySwitchRole = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cn.monkey.proto.ApplySwitchRole, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cn.monkey.proto.ApplySwitchRole.displayName = 'proto.cn.monkey.proto.ApplySwitchRole';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cn.monkey.proto.AgreeSwitchRole = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cn.monkey.proto.AgreeSwitchRole, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cn.monkey.proto.AgreeSwitchRole.displayName = 'proto.cn.monkey.proto.AgreeSwitchRole';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cn.monkey.proto.SearchItemResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cn.monkey.proto.SearchItemResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cn.monkey.proto.SearchItemResult.displayName = 'proto.cn.monkey.proto.SearchItemResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cn.monkey.proto.GameData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cn.monkey.proto.GameData.repeatedFields_, null);
};
goog.inherits(proto.cn.monkey.proto.GameData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cn.monkey.proto.GameData.displayName = 'proto.cn.monkey.proto.GameData';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cn.monkey.proto.ChooseRoomServer.prototype.toObject = function(opt_includeInstance) {
  return proto.cn.monkey.proto.ChooseRoomServer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cn.monkey.proto.ChooseRoomServer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cn.monkey.proto.ChooseRoomServer.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cn.monkey.proto.ChooseRoomServer}
 */
proto.cn.monkey.proto.ChooseRoomServer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cn.monkey.proto.ChooseRoomServer;
  return proto.cn.monkey.proto.ChooseRoomServer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cn.monkey.proto.ChooseRoomServer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cn.monkey.proto.ChooseRoomServer}
 */
proto.cn.monkey.proto.ChooseRoomServer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cn.monkey.proto.ChooseRoomServer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cn.monkey.proto.ChooseRoomServer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cn.monkey.proto.ChooseRoomServer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cn.monkey.proto.ChooseRoomServer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cn.monkey.proto.ChooseRoomServerResult.prototype.toObject = function(opt_includeInstance) {
  return proto.cn.monkey.proto.ChooseRoomServerResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cn.monkey.proto.ChooseRoomServerResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cn.monkey.proto.ChooseRoomServerResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    waitcount: jspb.Message.getFieldWithDefault(msg, 1, 0),
    roomserverurl: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cn.monkey.proto.ChooseRoomServerResult}
 */
proto.cn.monkey.proto.ChooseRoomServerResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cn.monkey.proto.ChooseRoomServerResult;
  return proto.cn.monkey.proto.ChooseRoomServerResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cn.monkey.proto.ChooseRoomServerResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cn.monkey.proto.ChooseRoomServerResult}
 */
proto.cn.monkey.proto.ChooseRoomServerResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWaitcount(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomserverurl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cn.monkey.proto.ChooseRoomServerResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cn.monkey.proto.ChooseRoomServerResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cn.monkey.proto.ChooseRoomServerResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cn.monkey.proto.ChooseRoomServerResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWaitcount();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRoomserverurl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 waitCount = 1;
 * @return {number}
 */
proto.cn.monkey.proto.ChooseRoomServerResult.prototype.getWaitcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.cn.monkey.proto.ChooseRoomServerResult} returns this
 */
proto.cn.monkey.proto.ChooseRoomServerResult.prototype.setWaitcount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string roomServerUrl = 2;
 * @return {string}
 */
proto.cn.monkey.proto.ChooseRoomServerResult.prototype.getRoomserverurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cn.monkey.proto.ChooseRoomServerResult} returns this
 */
proto.cn.monkey.proto.ChooseRoomServerResult.prototype.setRoomserverurl = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cn.monkey.proto.Create.prototype.toObject = function(opt_includeInstance) {
  return proto.cn.monkey.proto.Create.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cn.monkey.proto.Create} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cn.monkey.proto.Create.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cn.monkey.proto.Create}
 */
proto.cn.monkey.proto.Create.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cn.monkey.proto.Create;
  return proto.cn.monkey.proto.Create.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cn.monkey.proto.Create} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cn.monkey.proto.Create}
 */
proto.cn.monkey.proto.Create.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cn.monkey.proto.Create.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cn.monkey.proto.Create.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cn.monkey.proto.Create} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cn.monkey.proto.Create.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.cn.monkey.proto.Create.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cn.monkey.proto.Create} returns this
 */
proto.cn.monkey.proto.Create.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cn.monkey.proto.GameEnter.prototype.toObject = function(opt_includeInstance) {
  return proto.cn.monkey.proto.GameEnter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cn.monkey.proto.GameEnter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cn.monkey.proto.GameEnter.toObject = function(includeInstance, msg) {
  var f, obj = {
    password: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cn.monkey.proto.GameEnter}
 */
proto.cn.monkey.proto.GameEnter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cn.monkey.proto.GameEnter;
  return proto.cn.monkey.proto.GameEnter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cn.monkey.proto.GameEnter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cn.monkey.proto.GameEnter}
 */
proto.cn.monkey.proto.GameEnter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cn.monkey.proto.GameEnter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cn.monkey.proto.GameEnter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cn.monkey.proto.GameEnter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cn.monkey.proto.GameEnter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string password = 1;
 * @return {string}
 */
proto.cn.monkey.proto.GameEnter.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cn.monkey.proto.GameEnter} returns this
 */
proto.cn.monkey.proto.GameEnter.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cn.monkey.proto.EnterScene.prototype.toObject = function(opt_includeInstance) {
  return proto.cn.monkey.proto.EnterScene.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cn.monkey.proto.EnterScene} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cn.monkey.proto.EnterScene.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cn.monkey.proto.EnterScene}
 */
proto.cn.monkey.proto.EnterScene.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cn.monkey.proto.EnterScene;
  return proto.cn.monkey.proto.EnterScene.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cn.monkey.proto.EnterScene} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cn.monkey.proto.EnterScene}
 */
proto.cn.monkey.proto.EnterScene.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cn.monkey.proto.EnterScene.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cn.monkey.proto.EnterScene.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cn.monkey.proto.EnterScene} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cn.monkey.proto.EnterScene.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.cn.monkey.proto.EnterScene.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cn.monkey.proto.EnterScene} returns this
 */
proto.cn.monkey.proto.EnterScene.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cn.monkey.proto.Player.prototype.toObject = function(opt_includeInstance) {
  return proto.cn.monkey.proto.Player.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cn.monkey.proto.Player} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cn.monkey.proto.Player.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    role: (f = msg.getRole()) && proto.cn.monkey.proto.Role.toObject(includeInstance, f),
    scene: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cn.monkey.proto.Player}
 */
proto.cn.monkey.proto.Player.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cn.monkey.proto.Player;
  return proto.cn.monkey.proto.Player.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cn.monkey.proto.Player} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cn.monkey.proto.Player}
 */
proto.cn.monkey.proto.Player.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.cn.monkey.proto.Role;
      reader.readMessage(value,proto.cn.monkey.proto.Role.deserializeBinaryFromReader);
      msg.setRole(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setScene(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cn.monkey.proto.Player.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cn.monkey.proto.Player.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cn.monkey.proto.Player} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cn.monkey.proto.Player.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRole();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.cn.monkey.proto.Role.serializeBinaryToWriter
    );
  }
  f = message.getScene();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.cn.monkey.proto.Player.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cn.monkey.proto.Player} returns this
 */
proto.cn.monkey.proto.Player.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.cn.monkey.proto.Player.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cn.monkey.proto.Player} returns this
 */
proto.cn.monkey.proto.Player.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Role role = 3;
 * @return {?proto.cn.monkey.proto.Role}
 */
proto.cn.monkey.proto.Player.prototype.getRole = function() {
  return /** @type{?proto.cn.monkey.proto.Role} */ (
    jspb.Message.getWrapperField(this, proto.cn.monkey.proto.Role, 3));
};


/**
 * @param {?proto.cn.monkey.proto.Role|undefined} value
 * @return {!proto.cn.monkey.proto.Player} returns this
*/
proto.cn.monkey.proto.Player.prototype.setRole = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cn.monkey.proto.Player} returns this
 */
proto.cn.monkey.proto.Player.prototype.clearRole = function() {
  return this.setRole(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cn.monkey.proto.Player.prototype.hasRole = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string scene = 4;
 * @return {string}
 */
proto.cn.monkey.proto.Player.prototype.getScene = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.cn.monkey.proto.Player} returns this
 */
proto.cn.monkey.proto.Player.prototype.setScene = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cn.monkey.proto.Role.prototype.toObject = function(opt_includeInstance) {
  return proto.cn.monkey.proto.Role.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cn.monkey.proto.Role} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cn.monkey.proto.Role.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    briefintroduction: jspb.Message.getFieldWithDefault(msg, 2, ""),
    desc: jspb.Message.getFieldWithDefault(msg, 3, ""),
    img: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cn.monkey.proto.Role}
 */
proto.cn.monkey.proto.Role.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cn.monkey.proto.Role;
  return proto.cn.monkey.proto.Role.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cn.monkey.proto.Role} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cn.monkey.proto.Role}
 */
proto.cn.monkey.proto.Role.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBriefintroduction(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDesc(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setImg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cn.monkey.proto.Role.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cn.monkey.proto.Role.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cn.monkey.proto.Role} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cn.monkey.proto.Role.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBriefintroduction();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDesc();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getImg();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.cn.monkey.proto.Role.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cn.monkey.proto.Role} returns this
 */
proto.cn.monkey.proto.Role.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string briefIntroduction = 2;
 * @return {string}
 */
proto.cn.monkey.proto.Role.prototype.getBriefintroduction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cn.monkey.proto.Role} returns this
 */
proto.cn.monkey.proto.Role.prototype.setBriefintroduction = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string desc = 3;
 * @return {string}
 */
proto.cn.monkey.proto.Role.prototype.getDesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.cn.monkey.proto.Role} returns this
 */
proto.cn.monkey.proto.Role.prototype.setDesc = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string img = 4;
 * @return {string}
 */
proto.cn.monkey.proto.Role.prototype.getImg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.cn.monkey.proto.Role} returns this
 */
proto.cn.monkey.proto.Role.prototype.setImg = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cn.monkey.proto.DMInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.cn.monkey.proto.DMInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cn.monkey.proto.DMInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cn.monkey.proto.DMInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    username: jspb.Message.getFieldWithDefault(msg, 2, ""),
    score: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cn.monkey.proto.DMInfo}
 */
proto.cn.monkey.proto.DMInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cn.monkey.proto.DMInfo;
  return proto.cn.monkey.proto.DMInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cn.monkey.proto.DMInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cn.monkey.proto.DMInfo}
 */
proto.cn.monkey.proto.DMInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cn.monkey.proto.DMInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cn.monkey.proto.DMInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cn.monkey.proto.DMInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cn.monkey.proto.DMInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getScore();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string uid = 1;
 * @return {string}
 */
proto.cn.monkey.proto.DMInfo.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cn.monkey.proto.DMInfo} returns this
 */
proto.cn.monkey.proto.DMInfo.prototype.setUid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string username = 2;
 * @return {string}
 */
proto.cn.monkey.proto.DMInfo.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cn.monkey.proto.DMInfo} returns this
 */
proto.cn.monkey.proto.DMInfo.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 score = 3;
 * @return {number}
 */
proto.cn.monkey.proto.DMInfo.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.cn.monkey.proto.DMInfo} returns this
 */
proto.cn.monkey.proto.DMInfo.prototype.setScore = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cn.monkey.proto.Item.prototype.toObject = function(opt_includeInstance) {
  return proto.cn.monkey.proto.Item.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cn.monkey.proto.Item} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cn.monkey.proto.Item.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    desc: jspb.Message.getFieldWithDefault(msg, 2, ""),
    img: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cn.monkey.proto.Item}
 */
proto.cn.monkey.proto.Item.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cn.monkey.proto.Item;
  return proto.cn.monkey.proto.Item.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cn.monkey.proto.Item} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cn.monkey.proto.Item}
 */
proto.cn.monkey.proto.Item.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDesc(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setImg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cn.monkey.proto.Item.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cn.monkey.proto.Item.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cn.monkey.proto.Item} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cn.monkey.proto.Item.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDesc();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getImg();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.cn.monkey.proto.Item.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cn.monkey.proto.Item} returns this
 */
proto.cn.monkey.proto.Item.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string desc = 2;
 * @return {string}
 */
proto.cn.monkey.proto.Item.prototype.getDesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cn.monkey.proto.Item} returns this
 */
proto.cn.monkey.proto.Item.prototype.setDesc = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string img = 3;
 * @return {string}
 */
proto.cn.monkey.proto.Item.prototype.getImg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.cn.monkey.proto.Item} returns this
 */
proto.cn.monkey.proto.Item.prototype.setImg = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cn.monkey.proto.Scene.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cn.monkey.proto.Scene.prototype.toObject = function(opt_includeInstance) {
  return proto.cn.monkey.proto.Scene.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cn.monkey.proto.Scene} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cn.monkey.proto.Scene.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    desc: jspb.Message.getFieldWithDefault(msg, 2, ""),
    img: jspb.Message.getFieldWithDefault(msg, 3, ""),
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.cn.monkey.proto.Item.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cn.monkey.proto.Scene}
 */
proto.cn.monkey.proto.Scene.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cn.monkey.proto.Scene;
  return proto.cn.monkey.proto.Scene.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cn.monkey.proto.Scene} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cn.monkey.proto.Scene}
 */
proto.cn.monkey.proto.Scene.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDesc(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setImg(value);
      break;
    case 4:
      var value = new proto.cn.monkey.proto.Item;
      reader.readMessage(value,proto.cn.monkey.proto.Item.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cn.monkey.proto.Scene.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cn.monkey.proto.Scene.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cn.monkey.proto.Scene} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cn.monkey.proto.Scene.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDesc();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getImg();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.cn.monkey.proto.Item.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.cn.monkey.proto.Scene.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cn.monkey.proto.Scene} returns this
 */
proto.cn.monkey.proto.Scene.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string desc = 2;
 * @return {string}
 */
proto.cn.monkey.proto.Scene.prototype.getDesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cn.monkey.proto.Scene} returns this
 */
proto.cn.monkey.proto.Scene.prototype.setDesc = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string img = 3;
 * @return {string}
 */
proto.cn.monkey.proto.Scene.prototype.getImg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.cn.monkey.proto.Scene} returns this
 */
proto.cn.monkey.proto.Scene.prototype.setImg = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated Item items = 4;
 * @return {!Array<!proto.cn.monkey.proto.Item>}
 */
proto.cn.monkey.proto.Scene.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.cn.monkey.proto.Item>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cn.monkey.proto.Item, 4));
};


/**
 * @param {!Array<!proto.cn.monkey.proto.Item>} value
 * @return {!proto.cn.monkey.proto.Scene} returns this
*/
proto.cn.monkey.proto.Scene.prototype.setItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.cn.monkey.proto.Item=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cn.monkey.proto.Item}
 */
proto.cn.monkey.proto.Scene.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.cn.monkey.proto.Item, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cn.monkey.proto.Scene} returns this
 */
proto.cn.monkey.proto.Scene.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cn.monkey.proto.ApplySwitchRole.prototype.toObject = function(opt_includeInstance) {
  return proto.cn.monkey.proto.ApplySwitchRole.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cn.monkey.proto.ApplySwitchRole} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cn.monkey.proto.ApplySwitchRole.toObject = function(includeInstance, msg) {
  var f, obj = {
    target: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cn.monkey.proto.ApplySwitchRole}
 */
proto.cn.monkey.proto.ApplySwitchRole.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cn.monkey.proto.ApplySwitchRole;
  return proto.cn.monkey.proto.ApplySwitchRole.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cn.monkey.proto.ApplySwitchRole} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cn.monkey.proto.ApplySwitchRole}
 */
proto.cn.monkey.proto.ApplySwitchRole.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTarget(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cn.monkey.proto.ApplySwitchRole.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cn.monkey.proto.ApplySwitchRole.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cn.monkey.proto.ApplySwitchRole} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cn.monkey.proto.ApplySwitchRole.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTarget();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string target = 1;
 * @return {string}
 */
proto.cn.monkey.proto.ApplySwitchRole.prototype.getTarget = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cn.monkey.proto.ApplySwitchRole} returns this
 */
proto.cn.monkey.proto.ApplySwitchRole.prototype.setTarget = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cn.monkey.proto.AgreeSwitchRole.prototype.toObject = function(opt_includeInstance) {
  return proto.cn.monkey.proto.AgreeSwitchRole.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cn.monkey.proto.AgreeSwitchRole} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cn.monkey.proto.AgreeSwitchRole.toObject = function(includeInstance, msg) {
  var f, obj = {
    target: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cn.monkey.proto.AgreeSwitchRole}
 */
proto.cn.monkey.proto.AgreeSwitchRole.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cn.monkey.proto.AgreeSwitchRole;
  return proto.cn.monkey.proto.AgreeSwitchRole.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cn.monkey.proto.AgreeSwitchRole} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cn.monkey.proto.AgreeSwitchRole}
 */
proto.cn.monkey.proto.AgreeSwitchRole.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTarget(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cn.monkey.proto.AgreeSwitchRole.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cn.monkey.proto.AgreeSwitchRole.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cn.monkey.proto.AgreeSwitchRole} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cn.monkey.proto.AgreeSwitchRole.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTarget();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string target = 1;
 * @return {string}
 */
proto.cn.monkey.proto.AgreeSwitchRole.prototype.getTarget = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cn.monkey.proto.AgreeSwitchRole} returns this
 */
proto.cn.monkey.proto.AgreeSwitchRole.prototype.setTarget = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cn.monkey.proto.SearchItemResult.prototype.toObject = function(opt_includeInstance) {
  return proto.cn.monkey.proto.SearchItemResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cn.monkey.proto.SearchItemResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cn.monkey.proto.SearchItemResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    item: (f = msg.getItem()) && proto.cn.monkey.proto.Item.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cn.monkey.proto.SearchItemResult}
 */
proto.cn.monkey.proto.SearchItemResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cn.monkey.proto.SearchItemResult;
  return proto.cn.monkey.proto.SearchItemResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cn.monkey.proto.SearchItemResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cn.monkey.proto.SearchItemResult}
 */
proto.cn.monkey.proto.SearchItemResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cn.monkey.proto.Item;
      reader.readMessage(value,proto.cn.monkey.proto.Item.deserializeBinaryFromReader);
      msg.setItem(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cn.monkey.proto.SearchItemResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cn.monkey.proto.SearchItemResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cn.monkey.proto.SearchItemResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cn.monkey.proto.SearchItemResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItem();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cn.monkey.proto.Item.serializeBinaryToWriter
    );
  }
};


/**
 * optional Item item = 1;
 * @return {?proto.cn.monkey.proto.Item}
 */
proto.cn.monkey.proto.SearchItemResult.prototype.getItem = function() {
  return /** @type{?proto.cn.monkey.proto.Item} */ (
    jspb.Message.getWrapperField(this, proto.cn.monkey.proto.Item, 1));
};


/**
 * @param {?proto.cn.monkey.proto.Item|undefined} value
 * @return {!proto.cn.monkey.proto.SearchItemResult} returns this
*/
proto.cn.monkey.proto.SearchItemResult.prototype.setItem = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cn.monkey.proto.SearchItemResult} returns this
 */
proto.cn.monkey.proto.SearchItemResult.prototype.clearItem = function() {
  return this.setItem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cn.monkey.proto.SearchItemResult.prototype.hasItem = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cn.monkey.proto.GameData.repeatedFields_ = [3,4,5,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cn.monkey.proto.GameData.prototype.toObject = function(opt_includeInstance) {
  return proto.cn.monkey.proto.GameData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cn.monkey.proto.GameData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cn.monkey.proto.GameData.toObject = function(includeInstance, msg) {
  var f, obj = {
    master: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dm: (f = msg.getDm()) && proto.cn.monkey.proto.Player.toObject(includeInstance, f),
    dminfosList: jspb.Message.toObjectList(msg.getDminfosList(),
    proto.cn.monkey.proto.DMInfo.toObject, includeInstance),
    playersList: jspb.Message.toObjectList(msg.getPlayersList(),
    proto.cn.monkey.proto.Player.toObject, includeInstance),
    rolesList: jspb.Message.toObjectList(msg.getRolesList(),
    proto.cn.monkey.proto.Role.toObject, includeInstance),
    scenesList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cn.monkey.proto.GameData}
 */
proto.cn.monkey.proto.GameData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cn.monkey.proto.GameData;
  return proto.cn.monkey.proto.GameData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cn.monkey.proto.GameData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cn.monkey.proto.GameData}
 */
proto.cn.monkey.proto.GameData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMaster(value);
      break;
    case 2:
      var value = new proto.cn.monkey.proto.Player;
      reader.readMessage(value,proto.cn.monkey.proto.Player.deserializeBinaryFromReader);
      msg.setDm(value);
      break;
    case 3:
      var value = new proto.cn.monkey.proto.DMInfo;
      reader.readMessage(value,proto.cn.monkey.proto.DMInfo.deserializeBinaryFromReader);
      msg.addDminfos(value);
      break;
    case 4:
      var value = new proto.cn.monkey.proto.Player;
      reader.readMessage(value,proto.cn.monkey.proto.Player.deserializeBinaryFromReader);
      msg.addPlayers(value);
      break;
    case 5:
      var value = new proto.cn.monkey.proto.Role;
      reader.readMessage(value,proto.cn.monkey.proto.Role.deserializeBinaryFromReader);
      msg.addRoles(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addScenes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cn.monkey.proto.GameData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cn.monkey.proto.GameData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cn.monkey.proto.GameData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cn.monkey.proto.GameData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMaster();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDm();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.cn.monkey.proto.Player.serializeBinaryToWriter
    );
  }
  f = message.getDminfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.cn.monkey.proto.DMInfo.serializeBinaryToWriter
    );
  }
  f = message.getPlayersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.cn.monkey.proto.Player.serializeBinaryToWriter
    );
  }
  f = message.getRolesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.cn.monkey.proto.Role.serializeBinaryToWriter
    );
  }
  f = message.getScenesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
};


/**
 * optional string master = 1;
 * @return {string}
 */
proto.cn.monkey.proto.GameData.prototype.getMaster = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cn.monkey.proto.GameData} returns this
 */
proto.cn.monkey.proto.GameData.prototype.setMaster = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Player dm = 2;
 * @return {?proto.cn.monkey.proto.Player}
 */
proto.cn.monkey.proto.GameData.prototype.getDm = function() {
  return /** @type{?proto.cn.monkey.proto.Player} */ (
    jspb.Message.getWrapperField(this, proto.cn.monkey.proto.Player, 2));
};


/**
 * @param {?proto.cn.monkey.proto.Player|undefined} value
 * @return {!proto.cn.monkey.proto.GameData} returns this
*/
proto.cn.monkey.proto.GameData.prototype.setDm = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cn.monkey.proto.GameData} returns this
 */
proto.cn.monkey.proto.GameData.prototype.clearDm = function() {
  return this.setDm(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cn.monkey.proto.GameData.prototype.hasDm = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated DMInfo dmInfos = 3;
 * @return {!Array<!proto.cn.monkey.proto.DMInfo>}
 */
proto.cn.monkey.proto.GameData.prototype.getDminfosList = function() {
  return /** @type{!Array<!proto.cn.monkey.proto.DMInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cn.monkey.proto.DMInfo, 3));
};


/**
 * @param {!Array<!proto.cn.monkey.proto.DMInfo>} value
 * @return {!proto.cn.monkey.proto.GameData} returns this
*/
proto.cn.monkey.proto.GameData.prototype.setDminfosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.cn.monkey.proto.DMInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cn.monkey.proto.DMInfo}
 */
proto.cn.monkey.proto.GameData.prototype.addDminfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.cn.monkey.proto.DMInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cn.monkey.proto.GameData} returns this
 */
proto.cn.monkey.proto.GameData.prototype.clearDminfosList = function() {
  return this.setDminfosList([]);
};


/**
 * repeated Player players = 4;
 * @return {!Array<!proto.cn.monkey.proto.Player>}
 */
proto.cn.monkey.proto.GameData.prototype.getPlayersList = function() {
  return /** @type{!Array<!proto.cn.monkey.proto.Player>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cn.monkey.proto.Player, 4));
};


/**
 * @param {!Array<!proto.cn.monkey.proto.Player>} value
 * @return {!proto.cn.monkey.proto.GameData} returns this
*/
proto.cn.monkey.proto.GameData.prototype.setPlayersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.cn.monkey.proto.Player=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cn.monkey.proto.Player}
 */
proto.cn.monkey.proto.GameData.prototype.addPlayers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.cn.monkey.proto.Player, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cn.monkey.proto.GameData} returns this
 */
proto.cn.monkey.proto.GameData.prototype.clearPlayersList = function() {
  return this.setPlayersList([]);
};


/**
 * repeated Role roles = 5;
 * @return {!Array<!proto.cn.monkey.proto.Role>}
 */
proto.cn.monkey.proto.GameData.prototype.getRolesList = function() {
  return /** @type{!Array<!proto.cn.monkey.proto.Role>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cn.monkey.proto.Role, 5));
};


/**
 * @param {!Array<!proto.cn.monkey.proto.Role>} value
 * @return {!proto.cn.monkey.proto.GameData} returns this
*/
proto.cn.monkey.proto.GameData.prototype.setRolesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.cn.monkey.proto.Role=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cn.monkey.proto.Role}
 */
proto.cn.monkey.proto.GameData.prototype.addRoles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.cn.monkey.proto.Role, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cn.monkey.proto.GameData} returns this
 */
proto.cn.monkey.proto.GameData.prototype.clearRolesList = function() {
  return this.setRolesList([]);
};


/**
 * repeated string scenes = 7;
 * @return {!Array<string>}
 */
proto.cn.monkey.proto.GameData.prototype.getScenesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.cn.monkey.proto.GameData} returns this
 */
proto.cn.monkey.proto.GameData.prototype.setScenesList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.cn.monkey.proto.GameData} returns this
 */
proto.cn.monkey.proto.GameData.prototype.addScenes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cn.monkey.proto.GameData} returns this
 */
proto.cn.monkey.proto.GameData.prototype.clearScenesList = function() {
  return this.setScenesList([]);
};


goog.object.extend(exports, proto.cn.monkey.proto);
